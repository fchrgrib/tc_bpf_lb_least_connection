// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTracepoint returns the embedded CollectionSpec for tracepoint.
func loadTracepoint() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TracepointBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tracepoint: %w", err)
	}

	return spec, err
}

// loadTracepointObjects loads tracepoint and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tracepointObjects
//	*tracepointPrograms
//	*tracepointMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTracepointObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTracepoint()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tracepointSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepointSpecs struct {
	tracepointProgramSpecs
	tracepointMapSpecs
	tracepointVariableSpecs
}

// tracepointProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepointProgramSpecs struct {
	TraceInetSockSetState *ebpf.ProgramSpec `ebpf:"trace_inet_sock_set_state"`
}

// tracepointMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepointMapSpecs struct {
	Events              *ebpf.MapSpec `ebpf:"events"`
	PodConnectionCounts *ebpf.MapSpec `ebpf:"pod_connection_counts"`
}

// tracepointVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracepointVariableSpecs struct {
}

// tracepointObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTracepointObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepointObjects struct {
	tracepointPrograms
	tracepointMaps
	tracepointVariables
}

func (o *tracepointObjects) Close() error {
	return _TracepointClose(
		&o.tracepointPrograms,
		&o.tracepointMaps,
	)
}

// tracepointMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTracepointObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepointMaps struct {
	Events              *ebpf.Map `ebpf:"events"`
	PodConnectionCounts *ebpf.Map `ebpf:"pod_connection_counts"`
}

func (m *tracepointMaps) Close() error {
	return _TracepointClose(
		m.Events,
		m.PodConnectionCounts,
	)
}

// tracepointVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTracepointObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepointVariables struct {
}

// tracepointPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTracepointObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracepointPrograms struct {
	TraceInetSockSetState *ebpf.Program `ebpf:"trace_inet_sock_set_state"`
}

func (p *tracepointPrograms) Close() error {
	return _TracepointClose(
		p.TraceInetSockSetState,
	)
}

func _TracepointClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tracepoint_bpfel.o
var _TracepointBytes []byte
